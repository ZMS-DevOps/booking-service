// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: booking_service.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	AddUnavailability(ctx context.Context, in *AddUnavailabilityRequest, opts ...grpc.CallOption) (*AddUnavailabilityResponse, error)
	EditAccommodation(ctx context.Context, in *EditAccommodationRequest, opts ...grpc.CallOption) (*EditAccommodationResponse, error)
	FilterAvailableAccommodation(ctx context.Context, in *FilterAvailableAccommodationRequest, opts ...grpc.CallOption) (*FilterAvailableAccommodationResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) AddUnavailability(ctx context.Context, in *AddUnavailabilityRequest, opts ...grpc.CallOption) (*AddUnavailabilityResponse, error) {
	out := new(AddUnavailabilityResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/AddUnavailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) EditAccommodation(ctx context.Context, in *EditAccommodationRequest, opts ...grpc.CallOption) (*EditAccommodationResponse, error) {
	out := new(EditAccommodationResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/EditAccommodation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) FilterAvailableAccommodation(ctx context.Context, in *FilterAvailableAccommodationRequest, opts ...grpc.CallOption) (*FilterAvailableAccommodationResponse, error) {
	out := new(FilterAvailableAccommodationResponse)
	err := c.cc.Invoke(ctx, "/booking.BookingService/FilterAvailableAccommodation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	AddUnavailability(context.Context, *AddUnavailabilityRequest) (*AddUnavailabilityResponse, error)
	EditAccommodation(context.Context, *EditAccommodationRequest) (*EditAccommodationResponse, error)
	FilterAvailableAccommodation(context.Context, *FilterAvailableAccommodationRequest) (*FilterAvailableAccommodationResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) AddUnavailability(context.Context, *AddUnavailabilityRequest) (*AddUnavailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUnavailability not implemented")
}
func (UnimplementedBookingServiceServer) EditAccommodation(context.Context, *EditAccommodationRequest) (*EditAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAccommodation not implemented")
}
func (UnimplementedBookingServiceServer) FilterAvailableAccommodation(context.Context, *FilterAvailableAccommodationRequest) (*FilterAvailableAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAvailableAccommodation not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_AddUnavailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUnavailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AddUnavailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/AddUnavailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AddUnavailability(ctx, req.(*AddUnavailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_EditAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).EditAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/EditAccommodation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).EditAccommodation(ctx, req.(*EditAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_FilterAvailableAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAvailableAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).FilterAvailableAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.BookingService/FilterAvailableAccommodation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).FilterAvailableAccommodation(ctx, req.(*FilterAvailableAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUnavailability",
			Handler:    _BookingService_AddUnavailability_Handler,
		},
		{
			MethodName: "EditAccommodation",
			Handler:    _BookingService_EditAccommodation_Handler,
		},
		{
			MethodName: "FilterAvailableAccommodation",
			Handler:    _BookingService_FilterAvailableAccommodation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service.proto",
}
